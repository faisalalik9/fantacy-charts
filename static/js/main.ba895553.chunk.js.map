{"version":3,"sources":["curve-arrow 1.svg","Chart.js","Footer.js","lines.svg","App.js","reportWebVitals.js","index.js"],"names":["URL","Chart","useState","tradeSeries","setTradeSeries","charttitle","setcharttitle","type","settype","year","countryvalue","NLD","ARE","ITA","DZA","USA","FRA","DEU","KOR","MYS","NPL","useEffect","a","axios","get","request","data","tradeDeficitSeries","importSeries","exportSeries","fetchdata","map","t","push","countryValueList","itr","country","d","value","length","labels","datasets","label","borderColor","handleClickt","className","src","Arrow","alt","onClick","height","width","Footer","class","target","href","App","lines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAAe,G,OAAA,IAA0B,2C,OCKnCA,EAAM,+DA2LGC,MA1Lf,WACI,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACI,EAA8BF,qBAAlC,mBAAKG,EAAL,KAAiBC,EAAjB,KACA,EAAoBJ,qBAApB,mBAAIK,EAAJ,KAASC,EAAT,KACIC,EAAO,GACPC,EAAe,GACfC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GAEVC,qBAAU,WAAI,4CAEV,4BAAAC,EAAA,sEAC0BC,IAAMC,IAAIxB,GADpC,cACUyB,EADV,OAEa,MAATlB,EAAeH,EAAeqB,EAAQC,KAAKvB,aAAwB,OAATI,EAAgBH,EAAeqB,EAAQC,KAAKC,oBAA+B,OAATpB,EAAgBH,EAAeqB,EAAQC,KAAKE,cAAyB,OAATrB,EAAgBH,EAAeqB,EAAQC,KAAKG,cAAgBvB,EAAc,MACnPA,EAAN,MAATC,EAA6B,QAAoB,OAATA,EAA8B,gBAA4B,OAATA,EAA8B,SAAqB,OAATA,EAA8B,SAA0B,SAH/L,kBAIWkB,GAJX,4CAFU,uBAAC,WAAD,wBASVK,KACF,CAACvB,IAGHJ,EAAY4B,KAAI,SAAAC,GAGZ,OAFAvB,EAAKwB,KAAKD,EAAEvB,MACZC,EAAauB,KAAKD,EAAEE,kBACbxB,KAEX,IAAIyB,EAAM,EACVzB,EAAaqB,KAAI,SAAAK,GAmCb,IAlCAA,EAAQL,KAAI,SAAAM,GACS,QAAdA,EAAED,QACDzB,EAAIsB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNxB,EAAIqB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNvB,EAAIoB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNtB,EAAImB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNrB,EAAIkB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNpB,EAAIiB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNnB,EAAIgB,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNlB,EAAIe,KAAKI,EAAEC,OAEO,QAAdD,EAAED,QACNjB,EAAIc,KAAKI,EAAEC,OAEO,QAAdD,EAAED,SACNhB,EAAIa,KAAKI,EAAEC,UAInBH,IACMxB,EAAI4B,SAAWJ,GACjBxB,EAAIsB,KAAK,MAEb,KAAMrB,EAAI2B,SAAWJ,GACjBvB,EAAIqB,KAAK,MAEb,KAAMpB,EAAI0B,SAAWJ,GACjBtB,EAAIoB,KAAK,MAEb,KAAMnB,EAAIyB,SAAWJ,GACjBrB,EAAImB,KAAK,MAEb,KAAMlB,EAAIwB,SAAWJ,GACjBpB,EAAIkB,KAAK,MAEb,KAAMjB,EAAIuB,SAAWJ,GACjBnB,EAAIiB,KAAK,MAEb,KAAMhB,EAAIsB,SAAWJ,GACjBlB,EAAIgB,KAAK,MAEb,KAAMf,EAAIqB,SAAWJ,GACjBjB,EAAIe,KAAK,MAEb,KAAMd,EAAIoB,SAAWJ,GACjBhB,EAAIc,KAAK,MAEb,KAAMb,EAAImB,SAAWJ,GACjBf,EAAIa,KAAK,MAEb,OAAOG,KAIX,IAAMV,EAAO,CACTc,OAAS/B,EAETgC,SAAU,CAEJ,CACEf,KAAMf,EACN+B,MAAO,MACPC,YAAa,WAIf,CACEjB,KAAMd,EACN8B,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMb,EACN6B,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMZ,EACN4B,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMX,EACN2B,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMV,EACN0B,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMT,EACNyB,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAKR,EACLwB,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMP,EACNuB,MAAO,MACPC,YAAa,WAEf,CACEjB,KAAMN,EACNsB,MAAO,MACPC,YAAa,aAOzB,SAASC,EAAaN,GAClB9B,EAAQ8B,GAGZ,OACI,gCACK,sBAAKO,UAAU,kBAAf,4DAAgF,qBAAKC,IAAKC,EAAOC,IAAK,aACtG,sBAAKH,UAAU,cAAf,UACG,qBAAKI,QAAU,WAAML,EAAa,MAAlC,0BACA,qBAAKK,QAAU,WAAML,EAAa,OAAlC,kCACA,qBAAKK,QAAU,WAAML,EAAa,OAAlC,2BACA,qBAAKK,QAAU,WAAML,EAAa,OAAlC,8BAEJ,cAAC,IAAD,CAAMlB,KAAMA,EAAMwB,OAAQ,IAAKC,MAAO,MACtC,qBAAIN,UAAU,cAAd,uBAAuCxC,EAAvC,iB,OC7KG+C,MAZf,WACI,OACI,qBAAKC,MAAM,SAAX,SACI,iCAEI,2DAAmB,mBAAGR,UAAU,OAAOS,OAAO,SAASC,KAAK,+CAAzC,0BCPpB,MAA0B,kCC8B1BC,MAxBf,WAIE,OACE,sBAAKX,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SAAuB,qBAAKC,IAAKW,MACjC,sBAAKZ,UAAU,YAAf,UACE,+DACA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,SAKJ,cAAC,EAAD,QCTSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ba895553.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/curve-arrow 1.7bcc191d.svg\";","import React, {useState, useEffect} from 'react';\r\nimport { Line }  from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport \"./Chart.css\";\r\nimport Arrow from './curve-arrow 1.svg';\r\nconst URL = \"https://run.mocky.io/v3/3be6c19d-7ae5-4f84-950c-5b4ab4b22537\";\r\nfunction Chart() {\r\n    const [tradeSeries, setTradeSeries] = useState([]);\r\n    var [charttitle, setcharttitle] = useState();\r\n    var[type,settype] = useState();\r\n    var year = [];\r\n    var countryvalue = [];\r\n    var NLD = [];\r\n    var ARE = [];\r\n    var ITA = [];\r\n    var DZA = [];\r\n    var USA = [];\r\n    var FRA = [];\r\n    var DEU = [];\r\n    var KOR = [];\r\n    var MYS = [];\r\n    var NPL = [];\r\n     \r\n    useEffect(()=>{\r\n\r\n        async function fetchdata(){\r\n            const request = await axios.get(URL);\r\n            type === \"t\" ? setTradeSeries(request.data.tradeSeries) : type === \"td\" ? setTradeSeries(request.data.tradeDeficitSeries) : type === \"is\" ? setTradeSeries(request.data.importSeries) : type === \"es\" ? setTradeSeries(request.data.exportSeries) : setcharttitle(null);\r\n            type === \"t\" ? setcharttitle(\"Trade\") : type === \"td\" ? setcharttitle(\"Trade Deficit\") : type === \"is\" ? setcharttitle(\"Import\") : type === \"es\" ? setcharttitle(\"Export\") : setcharttitle(\"_____\");\r\n            return request;\r\n        }\r\n\r\n        fetchdata();\r\n    },[type]);\r\n\r\n\r\n    tradeSeries.map(t =>{\r\n        year.push(t.year);\r\n        countryvalue.push(t.countryValueList);\r\n        return countryvalue;\r\n    });\r\n    var itr = 0;\r\n    countryvalue.map(country =>{\r\n        country.map(d =>{\r\n            if(d.country === \"NLD\"){\r\n                NLD.push(d.value);\r\n            }\r\n            else if(d.country === \"ARE\"){\r\n                ARE.push(d.value);\r\n            }\r\n            else if(d.country === \"ITA\"){\r\n                ITA.push(d.value);\r\n            }\r\n            else if(d.country === \"DZA\"){\r\n                DZA.push(d.value);\r\n            }\r\n            else if(d.country === \"USA\"){\r\n                USA.push(d.value);\r\n            }\r\n            else if(d.country === \"FRA\"){\r\n                FRA.push(d.value);\r\n            }\r\n            else if(d.country === \"DEU\"){\r\n                DEU.push(d.value);\r\n            }\r\n            else if(d.country === \"KOR\"){\r\n                KOR.push(d.value);\r\n            }\r\n            else if(d.country === \"MYS\"){\r\n                MYS.push(d.value);\r\n            }\r\n            else if(d.country === \"NPL\"){\r\n                NPL.push(d.value);\r\n            }\r\n           \r\n        });\r\n        itr++;\r\n        while(NLD.length !== itr){\r\n            NLD.push(null);\r\n        }\r\n        while(ARE.length !== itr){\r\n            ARE.push(null);\r\n        }\r\n        while(ITA.length !== itr){\r\n            ITA.push(null);\r\n        }\r\n        while(DZA.length !== itr){\r\n            DZA.push(null);\r\n        }\r\n        while(USA.length !== itr){\r\n            USA.push(null);\r\n        }\r\n        while(FRA.length !== itr){\r\n            FRA.push(null);\r\n        }\r\n        while(DEU.length !== itr){\r\n            DEU.push(null);\r\n        }\r\n        while(KOR.length !== itr){\r\n            KOR.push(null);\r\n        }\r\n        while(MYS.length !== itr){\r\n            MYS.push(null);\r\n        } \r\n        while(NPL.length !== itr){\r\n            NPL.push(null);\r\n        }\r\n        return country;\r\n    });\r\n    \r\n    \r\n    const data = {\r\n        labels : year,\r\n\r\n        datasets: [\r\n             \r\n              {\r\n                data: NLD,\r\n                label: \"NLD\",\r\n                borderColor: \"#3333ff\",\r\n                // fill: false,\r\n                // backgroundColor: none,\r\n              },\r\n              {\r\n                data: ARE,\r\n                label: \"ARE\",\r\n                borderColor: \"#33ffff\",   \r\n              },\r\n              {\r\n                data: ITA,\r\n                label: \"ITA\",\r\n                borderColor: \"#5f003f\",   \r\n              },\r\n              {\r\n                data: DZA,\r\n                label: \"DZA\",\r\n                borderColor: \"#f72585\",   \r\n              },\r\n              {\r\n                data: USA,\r\n                label: \"USA\",\r\n                borderColor: \"#ffea00\",   \r\n              },\r\n              {\r\n                data: FRA,\r\n                label: \"FRA\",\r\n                borderColor: \"#52b788\",   \r\n              },\r\n              {\r\n                data: DEU,\r\n                label: \"DEU\",\r\n                borderColor: \"#ef6351\",   \r\n              },\r\n              {\r\n                data:KOR,\r\n                label: \"KOR\",\r\n                borderColor: \"#2FFE90\",   \r\n              },\r\n              {\r\n                data: MYS,\r\n                label: \"MYS\",\r\n                borderColor: \"#335c67\",   \r\n              },\r\n              {\r\n                data: NPL,\r\n                label: \"NPL\",\r\n                borderColor: \"#f9bec7\",   \r\n              },\r\n\r\n            ],\r\n         \r\n    }\r\n\r\n    function handleClickt(value){\r\n        settype(value);\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n             <div className=\"chart-types-top\">Please select a type of Series from below list <img src={Arrow} alt =\"Arrow\"></img></div>\r\n             <div className=\"chart-types\">\r\n                <div onClick={ ()=>{ handleClickt(\"t\")}} >Trade Series</div>\r\n                <div onClick={ ()=>{ handleClickt(\"td\")}} >Trade Deficit Series</div>\r\n                <div onClick={ ()=>{ handleClickt(\"is\")}} >Import Series</div>\r\n                <div onClick={ ()=>{ handleClickt(\"es\")}} >Export Series</div>\r\n            </div>\r\n            <Line data={data} height={400} width={600} />\r\n            <h3 className=\"chart-title\">Chart for {charttitle} Series</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport \"./Footer.css\";\r\nfunction Footer() {\r\n    return (\r\n        <div class=\"footer\">\r\n            <footer>\r\n\r\n                <p>Made with ❤️ by <a className=\"nova\" target=\"_blank\" href=\"https://faisalalik9-portfolio.herokuapp.com/\">nova</a></p>\r\n\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","export default __webpack_public_path__ + \"static/media/lines.b41910b7.svg\";","import './App.css';\nimport Chart from './Chart';\nimport Footer from './Footer';\nimport lines from './lines.svg';\n\n \nfunction App() {\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"lines\"><img src={lines}></img></div>\n      <div className=\"chart-div\">\n        <h2>Medicants of Ayurvedic System</h2>\n        <div className=\"chart\">\n          <Chart  />\n        </div>\n\n      </div>\n\n      <Footer />\n      \n       \n    </div>\n  );\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}